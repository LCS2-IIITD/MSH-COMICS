# -*- coding: utf-8 -*-
"""audio extract and noisereduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KpeauJ7nE0LX-OoRWGRKweVJoMaiD8GE
"""

import os

!pip3 install --user pydub
!pip3 install --user librosa
!pip3 install --user noisereduce
!pip3 install --user soundfile
!pip install ffmpeg

!pip3 install --user tensorflow-gpu==2.0.0-beta0

# Commented out IPython magic to ensure Python compatibility.
import IPython
from scipy.io import wavfile
import soundfile as sf
import matplotlib.pyplot as plt
import urllib.request
import numpy as np
import io
# %matplotlib inline

!pip3 install --user numba

from tqdm.autonotebook import tqdm
import noisereduce as nr

!pip3 install --user numba==0.43.0
!pip3 install --user llvmlite==0.32.1

"""**Extracting audios from video samples based on timestamps for the utterances**



"""

name_list=[]

f=open('/Data/name.txt',"r")
content=f.read()
for i in content.split(","):
  name_list.append(i)

for name in name_list:
  os.chdir('/Data/file_audio')
  if 'audi{0}'.format(name) in os.listdir():
    continue
  list1=[]
  f=open('/Data/data/{0}.txt'.format(name),"r")
  content=f.read()
  for i in content.split("\n"):
    list1.append(i)
  df=pd.DataFrame()
  df.head()
  s=pd.Series(list1)
  df_namesplit=s.str.split(":",n=1,expand=True)
  df=df_namesplit.drop(0,axis=1)
  df.rename(columns={1:"content"},inplace=True)
  s_2=df.content.str.split("/",expand=True)
  df_data=pd.DataFrame(s_2)
  df_data.rename(columns={0:"text",1:"timestamp_start",2:"timestamp_stop",3:"label",4:"humour"},inplace=True)
  df1=pd.DataFrame()
  df1['timestamp_start']=df_data['timestamp_start']
  df1['timestamp_stop']=df_data['timestamp_stop']
  df1=df1.dropna()
  print(len(df1))
  print(name)
  start=[]
  stop=[]
  start=df1['timestamp_start']
  stop=df1['timestamp_stop']
  os.mkdir('audi{0}'.format(name))
  os.chdir('audi{0}'.format(name))
  for i in start.index:
    a=start[i]
    b=stop[i]
    !ffmpeg -i '/drive//audio1/{name}.mp3' -ss $a -to $b -c copy {name}_{i}.mp3

mkdir wav_files
cd wav_files
!unzip audio1.zip

import os
os.chdir('/data/wav_files')

from pydub import AudioSegment

"""**Converting mp3 files to wav (mp3 causes timestamp errors while reading data)**"""

for file in os.listdir('/home/data/audio1'):
    sound = AudioSegment.from_mp3('/home/data/audio1/{}'.format(file))
    sound.export('/home/data/wav_files/{}.wav'.format(file.split(".")[0]), format="wav")

IPython.display.Audio(data=data, rate=rate)

noise,nrate=sf.read('/Data/laughter.wav')
noise=noise
noise=noise.sum(axis=1)
noise.shape

from scipy.io.wavfile import write

import os
os.getcwd()

"""**Laughter reduction from the samples using sample laughter file frequencies "laughter.wav"**"""

for file in os.listdir('/data/wav_files'):
    data, rate = sf.read('/data/wav_files/{}'.format(file))
    data = data
    data=data.sum(axis=1)
    noise_reduced = nr.reduce_noise(audio_clip=data, noise_clip=noise, prop_decrease=1.0, verbose=True)
    write('/data/processed_audio/{}'.format(file), rate, noise_reduced)

!pip3 install --user ipywidgets
!jupyter nbextension enable --py widgetsnbextension

"""**Extracting Mel Features from the noise reduced audio files**"""

d_total=[]
df_final=pd.DataFrame()
os.chdir('/data/audios')
for file in os.listdir('/data/processed_audio/'):
  os.chdir('/data/audios')
  d=[]
  name1=[]
  df=pd.DataFrame()
  path='/data/processed_audio/'+file+'/'
  for name in os.listdir('/data/processed_audio/'+file):
    X, sample_rate = librosa.load(path+name, res_type='kaiser_fast') 
    mfccs = np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=256).T,axis=0)
    d.append(mfccs)
    name1.append(file)
  df['features']=d
  df.to_csv('/data/data1/{0}.csv'.format(file))
  df_final=df_final.append(df,ignore_index=True) 
  d_total.append(d)